@startuml





/' Objects '/

class Handler {
	-mName : std::string
	-mState : handler_state_e
	-mWorkLog : uint64_t
	-mTotalWork : uint64_t
	-mTaskQueue : SafeQueue<uint64_t>
	+Handler() 
	+~Handler() 
	-CheckAvailableTask() : bool
	-SetState(handler_state_e newState): void
	+ReceiveTask(uint64_t task) : void
	+ExecuteTask(): void
	+GetName() : std::string
	+GetState() : handler_state_e
	+GetTotalWork() : uint64_t
	+GetWorkLog() : uint64_t
	+LogWork(uint64_t workLog) : void
}


class SafeQueue <template<class T>> {
	-m : mutable std::mutex
	-c : std::condition_variable
	-q : std::queue<T>
	+SafeQueue()
	+~SafeQueue()
	+back() : T
	+front() : T
	+pop() : T
	+empty() : bool {query}
	+size() : unsigned long {query}
	+push(T t) : void
}


class Server {
	-mListTasks : SafeQueue<uint64_t>
	-mListHandlers : std::vector<Handler>
	-mNumberOfHandlers : uint8_t
	+Server()
	+~Server()
	+GetRequirement(std::string& rFilePath) : void
	+SortRequirement() : void
	+AssignTask() : void
	+DecreaseNumberOfActiveHandlers() : void
	+ReadReport() : void
	+WriteReport() : void
}


enum HANDLER_STATE_E {
	ACTIVE
	INACTIVE
}





/' Inheritance relationships '/




/' Aggregation relationships '/
left to right direction
.Handler *-- .SafeQueue


.Server *-- .Handler


.Server *-- .SafeQueue






/' Nested objects '/



@enduml
